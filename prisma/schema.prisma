// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Device {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  description    String?
  location       String?
  connection     String           @default("http")
  type           Int              @default(0)
  ownerID        Int
  owner          User             @relation(fields: [ownerID], references: [id], onDelete: Cascade)
  telemetry      Telemetry[]
  attributes     Attribute[]
  ConnectionMQTT ConnectionMQTT?
  ConnectionHTTP ConnectionHTTP?
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String   @unique
  password String
  role     Int      @default(2)
  Device   Device[]
}

model Attribute {
  id               Int                @id @default(autoincrement())
  name             String
  type             String
  deviceID         Int
  device           Device             @relation(fields: [deviceID], references: [id], onDelete: Cascade)
  Telemetry        Telemetry[]
  AttributeMQTTMap AttributeMQTTMap[]
}

model Telemetry {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  value       String
  deviceID    Int
  attributeID Int
  attribute   Attribute @relation(fields: [attributeID], references: [id], onDelete: Cascade)
  device      Device    @relation(fields: [deviceID], references: [id], onDelete: Cascade)
}

model ConnectionMQTT {
  id               Int                @id @default(autoincrement())
  url              String
  clientID         String
  username         String?
  password         String?
  deviceID         Int                @unique
  device           Device             @relation(fields: [deviceID], references: [id], onDelete: Cascade)
  AttributeMQTTMap AttributeMQTTMap[]
}

model ConnectionHTTP {
  id           Int    @id @default(autoincrement())
  access_token String
  deviceID     Int
  device       Device @relation(fields: [deviceID], references: [id], onDelete: Cascade)
}

model AttributeMQTTMap {
  id         Int            @id @default(autoincrement())
  path       String
  attribute  Attribute      @relation(fields: [attributeID], references: [id], onDelete: Cascade)
  connection ConnectionMQTT @relation(fields: [connectionID], references: [id], onDelete: Cascade)

  attributeID  Int
  connectionID Int
}
